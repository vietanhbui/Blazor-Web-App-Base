@page "/login"
@using BlazorWebAppBase.Authentication;
@inject IJSRuntime js
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navigationManager
@layout GuestLayout

<div class="row mt-5">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>Login</h3>
        </div>
        <div class="mb-3">
            <label>User Name</label>
            <input @bind="model.UserName" class="form-control" placeholder="User Name" />
        </div>
        <div class="mb-3">
            <label>Password</label>
            <input @bind="model.Password" type="password" class="form-control" placeholder="Password" />
        </div>
        <div class="mb-3 d-grid gap-2">
            <button class="btn btn-primary" @onclick="OnClickLogin">Login</button>
        </div>
    </div>
</div>

@code {
    private class Model
    {
        public string UserName { get; set; }
        public string Password { get; set; }
    }

    private Model model = new Model();

    private async Task OnClickLogin()
    {
        if (model.UserName == "admin" && model.Password == "admin")
        {
            var customAuthStateProvder = (CustomAuthenticationStateProvider)authenticationStateProvider;
            await customAuthStateProvder.UpdateAuthenticationState(new UserSession
                {
                    UserName = model.UserName,
                    Role = "Admin"
                });
            navigationManager.NavigateTo("/", true);
            return;
        }
        if (model.UserName == "user" && model.Password == "user")
        {
            var customAuthStateProvder = (CustomAuthenticationStateProvider)authenticationStateProvider;
            await customAuthStateProvder.UpdateAuthenticationState(new UserSession
                {
                    UserName = model.UserName,
                    Role = "User"
                });
            navigationManager.NavigateTo("/", true);
            return;
        }
    }
}
